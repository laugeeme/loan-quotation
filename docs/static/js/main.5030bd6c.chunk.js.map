{"version":3,"sources":["components/Header.js","components/Form.js","helpers.js","components/Msj.js","components/Result.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","Form","props","quantity","saveQuantity","deadline","saveDeadline","saveTotal","saveLoading","useState","error","saveError","onSubmit","e","preventDefault","setTimeout","total","totalQuantity","totalDeadline","calculateTotal","className","type","placeholder","onChange","parseInt","target","value","Msj","Result","toFixed","Spinner","App","component","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5030bd6c.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nfunction Header({ title }) {\n  return (\n    <Fragment>\n      <h1>{title}</h1>\n    </Fragment>\n  );\n}\n\nexport default Header;\n\n//second option\n/* const Header = ({title}) => (\n    <h1>{title}</h1>\n); */\n","import React, { useState, Fragment } from 'react';\nimport { calculateTotal } from '../helpers';\n\nconst Form = (props) => {\n  const {\n    quantity,\n    saveQuantity,\n    deadline,\n    saveDeadline,\n    saveTotal,\n    saveLoading,\n  } = props;\n\n  //useState to validate the form. Starts with false, if there are errors in the form or empty fields, error changes to true and shows a error message.\n  const [error, saveError] = useState(false);\n\n  const readQuantity = (e) => {\n    saveQuantity(parseInt(e.target.value));\n  };\n\n  const readDeadline = (e) => {\n    saveDeadline(parseInt(e.target.value));\n  };\n\n  const calculateLoan = (e) => {\n    e.preventDefault();\n\n    //validate\n    if (quantity === 0 || deadline === '') {\n      saveError(true);\n      return;\n    }\n\n    //delete previous error\n    saveError(false);\n\n    //enable Spinner\n    saveLoading(true);\n\n    setTimeout(() => {\n      //make quote\n      const total = calculateTotal(quantity, deadline);\n\n      saveTotal(total);\n\n      //disable Spinner\n      saveLoading(false);\n    }, 3000);\n  };\n\n  return (\n    <Fragment>\n      <form onSubmit={calculateLoan}>\n        <div className=\"row\">\n          <div>\n            <label>Loan amount</label>\n            <input\n              className=\"u-full-width\"\n              type=\"number\"\n              placeholder=\"Example: 3000\"\n              onChange={readQuantity}\n            />\n          </div>\n          <div>\n            <label>Time to pay</label>\n            <select className=\"u-full-width\" onChange={readDeadline}>\n              <option value=\"\">Select</option>\n              <option value=\"3\">3 months</option>\n              <option value=\"6\">6 months</option>\n              <option value=\"12\">12 months</option>\n              <option value=\"24\">24 months</option>\n            </select>\n          </div>\n          <div>\n            <input\n              type=\"submit\"\n              value=\"Calculate\"\n              className=\"button-primary u-full-width\"\n            />\n          </div>\n        </div>\n      </form>\n      {error ? <p className=\"error\">All fields are required</p> : null}\n    </Fragment>\n  );\n};\n\nexport default Form;\n","export function calculateTotal(quantity, deadline) {\n  //Calculate interest on quantity\n  // 0-1000 = 25%\n  //1001-500 = 20%\n  //5001-10000 = 15%\n  //+10000 = 10%\n\n  let totalQuantity;\n\n  if (quantity <= 1000) {\n    totalQuantity = quantity * 0.25;\n  } else if (quantity > 1000 && quantity <= 5000) {\n    totalQuantity = quantity * 0.2;\n  } else if (quantity > 5000 && quantity <= 10000) {\n    totalQuantity = quantity * 0.15;\n  } else {\n    totalQuantity = quantity * 0.1;\n  }\n\n  //Calculate interest on deadline\n  // 3 = 5%\n  // 6 = 10%\n  //12 = 15%\n  //24 = 20%\n\n  let totalDeadline = 0;\n\n  switch (deadline) {\n    case 3:\n      totalDeadline = quantity * 0.05;\n      break;\n    case 6:\n      totalDeadline = quantity * 0.1;\n      break;\n    case 12:\n      totalDeadline = quantity * 0.15;\n      break;\n    case 24:\n      totalDeadline = quantity * 0.2;\n      break;\n    default:\n      break;\n  }\n\n  return totalDeadline + totalQuantity + quantity;\n}\n","import React from 'react';\n\nconst Msj = () => (\n\n    <p>Add an amount and a term to be paid to make the quote.</p>\n\n);\n\nexport default Msj; ","import React from 'react';\n\nconst Result = ({ total, deadline, quantity }) => (\n  <div className=\"u-full-width resultado\">\n    <h2>Summary</h2>\n    <p>The requested quantity is {quantity} $</p>\n    <p>Payable in {deadline} months </p>\n    <p>Your monthly payment is: {(total / deadline).toFixed(2)} $</p>\n    <p>Total to be paid: {(total).toFixed(2)} $</p>\n  </div>\n);\n\nexport default Result;\n","import React  from 'react';\nimport './Spinner.css';\n\nconst Spinner = () => {\n    return ( \n        <div className=\"sk-circle\">\n        <div className=\"sk-circle1 sk-child\"></div>\n        <div className=\"sk-circle2 sk-child\"></div>\n        <div className=\"sk-circle3 sk-child\"></div>\n        <div className=\"sk-circle4 sk-child\"></div>\n        <div className=\"sk-circle5 sk-child\"></div>\n        <div className=\"sk-circle6 sk-child\"></div>\n        <div className=\"sk-circle7 sk-child\"></div>\n        <div className=\"sk-circle8 sk-child\"></div>\n        <div className=\"sk-circle9 sk-child\"></div>\n        <div className=\"sk-circle10 sk-child\"></div>\n        <div className=\"sk-circle11 sk-child\"></div>\n        <div className=\"sk-circle12 sk-child\"></div>\n      </div>  \n\n     );\n}\n \nexport default Spinner;","import React, { Fragment, useState } from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Msj from './components/Msj';\nimport Result from './components/Result';\nimport Spinner from './components/Spinner';\n\nfunction App() {\n  //useState needs the value of the state (quantity) and the method to update that state (saveQuantity)\n  //Define state. UseState starts with 0$, and when saveQuantity changes, useStates updates.\n\n  const [quantity, saveQuantity] = useState(0);\n  const [deadline, saveDeadline] = useState('');\n  const [total, saveTotal] = useState(0);\n  const [loading, saveLoading] = useState(false);\n\n  let component;\n\n  if (loading) {\n    component = <Spinner />;\n  } else if (total === 0) {\n    component = <Msj />;\n  } else {\n    component = (\n      <Result total={total} deadline={deadline} quantity={quantity} />\n    );\n  }\n\n  return (\n    <Fragment>\n      <Header title=\"Loan quotation\" />\n\n      <div className=\"container\">\n        <Form\n          quantity={quantity}\n          saveQuantity={saveQuantity}\n          deadline={deadline}\n          saveDeadline={saveDeadline}\n          saveTotal={saveTotal}\n          saveLoading={saveLoading}\n        />\n\n        <div className=\"mensajes\">{component}</div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}